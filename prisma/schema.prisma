// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  fullName  String
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  grade     GradeLevel?
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  coursesCreated     Course[]      @relation("TeacherCourses")
  enrollments        Enrollment[]
  assignments        Assignment[]  @relation("TeacherAssignments")
  submissions        Submission[]
  quizAttempts       QuizAttempt[]
  discussionPosts    DiscussionPost[]
  discussionReplies  DiscussionReply[]
  announcements      Announcement[]
  notifications      Notification[]
  grades             Grade[]
  attendanceRecords  Attendance[]

  @@map("users")
}

model Course {
  id          String        @id @default(cuid())
  title       String
  description String
  code        String        @unique
  imageUrl    String?
  category    String?
  status      CourseStatus  @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign keys
  teacherId   String
  teacher     User          @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Cascade)

  // Relationships
  enrollments   Enrollment[]
  lessons       Lesson[]
  assignments   Assignment[]
  quizzes       Quiz[]
  discussions   Discussion[]
  announcements Announcement[]
  resources     Resource[]
  attendance    Attendance[]

  @@map("courses")
}

model Enrollment {
  id           String           @id @default(cuid())
  status       EnrollmentStatus @default(ACTIVE)
  enrolledAt   DateTime         @default(now())
  completedAt  DateTime?

  // Foreign keys
  userId       String
  courseId     String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?
  content     String      // JSON content supporting various media types
  type        LessonType  @default(TEXT)
  order       Int
  duration    Int?        // in minutes
  videoUrl    String?
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Assignment {
  id          String            @id @default(cuid())
  title       String
  description String
  type        AssignmentType    @default(ESSAY)
  maxPoints   Int               @default(100)
  dueDate     DateTime
  isPublished Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign keys
  courseId    String
  teacherId   String
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher     User              @relation("TeacherAssignments", fields: [teacherId], references: [id], onDelete: Cascade)

  // Relationships
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id          String           @id @default(cuid())
  content     String           // JSON content for various submission types
  attachments String?          // JSON array of file URLs
  status      SubmissionStatus @default(DRAFT)
  submittedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Foreign keys
  assignmentId String
  studentId    String
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Relationships
  grade        Grade?

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?        // in minutes
  attempts    Int         @default(1)
  randomize   Boolean     @default(false)
  showResults Boolean     @default(true)
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Relationships
  questions   Question[]
  quizAttempts QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id          String       @id @default(cuid())
  type        QuestionType
  question    String
  options     String       // JSON array for multiple choice options
  correctAnswer String     // JSON for correct answer(s)
  points      Int          @default(1)
  order       Int

  // Foreign keys
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Relationships
  answers     Answer[]

  @@map("questions")
}

model QuizAttempt {
  id          String         @id @default(cuid())
  score       Int?
  maxScore    Int
  timeSpent   Int?           // in seconds
  status      AttemptStatus  @default(IN_PROGRESS)
  startedAt   DateTime       @default(now())
  completedAt DateTime?

  // Foreign keys
  quizId      String
  studentId   String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student     User           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Relationships
  answers     Answer[]

  @@map("quiz_attempts")
}

model Answer {
  id          String      @id @default(cuid())
  answer      String      // JSON for student's answer
  isCorrect   Boolean?
  points      Int         @default(0)

  // Foreign keys
  questionId  String
  attemptId   String
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@unique([questionId, attemptId])
  @@map("answers")
}

model Grade {
  id          String     @id @default(cuid())
  score       Float
  maxScore    Float
  percentage  Float
  feedback    String?
  gradedAt    DateTime   @default(now())

  // Foreign keys
  submissionId String?   @unique
  studentId    String
  submission   Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model Discussion {
  id          String    @id @default(cuid())
  title       String
  description String?
  isLocked    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign keys
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Relationships
  posts       DiscussionPost[]

  @@map("discussions")
}

model DiscussionPost {
  id          String            @id @default(cuid())
  content     String
  isSticky    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign keys
  discussionId String
  authorId     String
  discussion   Discussion        @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  author       User              @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Relationships
  replies      DiscussionReply[]

  @@map("discussion_posts")
}

model DiscussionReply {
  id        String         @id @default(cuid())
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Foreign keys
  postId    String
  authorId  String
  post      DiscussionPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("discussion_replies")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  priority  Priority @default(NORMAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  courseId  String?
  authorId  String
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Foreign keys
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Resource {
  id        String       @id @default(cuid())
  title     String
  type      ResourceType
  url       String
  size      Int?         // in bytes
  mimeType  String?
  createdAt DateTime     @default(now())

  // Foreign keys
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Attendance {
  id        String     @id @default(cuid())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  notes     String?

  // Foreign keys
  courseId  String
  studentId String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId, date])
  @@map("attendance")
}

// Enums
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum GradeLevel {
  FIRST
  SECOND
  THIRD
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
}

enum LessonType {
  TEXT
  VIDEO
  AUDIO
  PRESENTATION
  INTERACTIVE
}

enum AssignmentType {
  ESSAY
  MULTIPLE_CHOICE
  PROJECT
  PRESENTATION
  LAB
  OTHER
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILL_IN_BLANK
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationType {
  ANNOUNCEMENT
  ASSIGNMENT
  GRADE
  DISCUSSION
  SYSTEM
}

enum ResourceType {
  DOCUMENT
  VIDEO
  AUDIO
  IMAGE
  ARCHIVE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
